{"ast":null,"code":"/**\n * PersianJs v0.4.0\n * https://github.com/usablica/persian.js\n * MIT licensed\n *\n * Copyright (C) 2012 usabli.ca and other contributors\n */\n(function () {\n  // Default config/variables\n  var VERSION = \"0.4.0\",\n      // Check for nodeJS\n  hasModule = typeof module !== 'undefined' && module.exports; // Declare Number Arrays in different locales\n\n  var arabicNumbers = [\"١\", \"٢\", \"٣\", \"٤\", \"٥\", \"٦\", \"٧\", \"٨\", \"٩\", \"٠\"],\n      persianNumbers = [\"۱\", \"۲\", \"۳\", \"۴\", \"۵\", \"۶\", \"۷\", \"۸\", \"۹\", \"۰\"],\n      englishNumbers = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"];\n  /**\n   * PersianJs main class\n   *\n   * @class PersianJs\n   */\n\n  function PersianJs(str) {\n    this._str = str;\n  }\n  /**\n   * Used for convert Arabic characters to Persian\n   *\n   * @api private\n   * @method _arabicChar\n   * @param {String} value\n   * @return {Object} PersianJs Object\n   */\n\n\n  function _arabicChar(value) {\n    if (!value) {\n      return;\n    }\n\n    var arabicChars = [\"ي\", \"ك\", \"‍\", \"دِ\", \"بِ\", \"زِ\", \"ذِ\", \"ِشِ\", \"ِسِ\", \"ى\"],\n        persianChars = [\"ی\", \"ک\", \"\", \"د\", \"ب\", \"ز\", \"ذ\", \"ش\", \"س\", \"ی\"];\n\n    for (var i = 0, charsLen = arabicChars.length; i < charsLen; i++) {\n      value = value.replace(new RegExp(arabicChars[i], \"g\"), persianChars[i]);\n    }\n\n    this._str = value;\n    return this;\n  }\n  /**\n   * Used for convert Persian numbers to English\n   * \n   * @api private\n   * @method _persianNumber\n   * @param {String} value\n   * @return {Object} PersianJs Object\n   */\n\n\n  function _persianNumber(value) {\n    if (!value) {\n      return;\n    }\n\n    for (var i = 0, numbersLen = englishNumbers.length; i < numbersLen; i++) {\n      value = value.replace(new RegExp(persianNumbers[i], \"g\"), englishNumbers[i]);\n    }\n\n    this._str = value;\n    return this;\n  }\n  /**\n   * Used for convert Arabic numbers to Persian\n   *\n   * @api private\n   * @method _arabicNumber\n   * @param {String} value\n   * @return {Object} PersianJs Object\n   */\n\n\n  function _arabicNumber(value) {\n    if (!value) {\n      return;\n    }\n\n    value = value.toString();\n\n    for (var i = 0, numbersLen = arabicNumbers.length; i < numbersLen; i++) {\n      value = value.replace(new RegExp(arabicNumbers[i], \"g\"), persianNumbers[i]);\n    }\n\n    this._str = value;\n    return this;\n  }\n  /**\n   * Used for convert English numbers to Persian\n   *\n   * @api private\n   * @method _englishNumber\n   * @param {String} value\n   * @return {Object} PersianJs Object\n   */\n\n\n  function _englishNumber(value) {\n    if (!value) {\n      return;\n    }\n\n    value = value.toString();\n    var englishNumbers = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n        persianNumbers = [\"۱\", \"۲\", \"۳\", \"۴\", \"۵\", \"۶\", \"۷\", \"۸\", \"۹\", \"۰\"];\n\n    for (var i = 0, numbersLen = englishNumbers.length; i < numbersLen; i++) {\n      value = value.replace(new RegExp(englishNumbers[i], \"g\"), persianNumbers[i]);\n    }\n\n    this._str = value;\n    return this;\n  }\n  /**\n      * Used for convert Persian and Arabic numbers to English string\n      *\n      * @api private\n      * @method _toEnglishNumber\n      * @param {String} value \n      * @return {Object} PersianJs Object\n      */\n\n\n  function _toEnglishNumber(value) {\n    if (!value) {\n      return;\n    }\n\n    for (var i = 0, numbersLen = englishNumbers.length; i < numbersLen; i++) {\n      value = value.replace(new RegExp(persianNumbers[i], \"g\"), englishNumbers[i]).replace(new RegExp(arabicNumbers[i], \"g\"), englishNumbers[i]);\n    }\n\n    this._str = value;\n    return this;\n  }\n  /**\n   * Used for decode Persian Charachters in URL\n   * https://fa.wikipedia.org/wiki/مدیاویکی:Gadget-Extra-Editbuttons-Functions.js\n   *\n   * @api private\n   * @method _decodeURL\n   * @param {String} value\n   * @return {Object} PersianJs Object\n   */\n\n\n  function _decodeURL(value) {\n    if (!value) {\n      return;\n    } // Replace every %20 with _ to protect them from decodeURI\n\n\n    var old = \"\";\n\n    while (old != value) {\n      old = value;\n      value = value.replace(/(http\\S+?)\\%20/g, '$1\\u200c\\u200c\\u200c_\\u200c\\u200c\\u200c');\n    } // Decode URIs\n    // NOTE: This would convert all %20's to _'s which could break some links\n    // but we will undo that later on\n\n\n    value = value.replace(/(http\\S+)/g, function (s, p) {\n      return decodeURI(p);\n    }); // Revive all instances of %20 to make sure no links is broken\n\n    value = value.replace(/\\u200c\\u200c\\u200c_\\u200c\\u200c\\u200c/g, '%20');\n    this._str = value;\n    return this;\n  }\n  /**\n   * Used for Change keyboard layout\n   *\n   * @api private\n   * @method _switchKey\n   * @param {String} value\n   * @return {Object} PersianJs Object\n   */\n\n\n  function _switchKey(value) {\n    if (!value) {\n      return;\n    }\n\n    var persianChar = [\"ض\", \"ص\", \"ث\", \"ق\", \"ف\", \"غ\", \"ع\", \"ه\", \"خ\", \"ح\", \"ج\", \"چ\", \"ش\", \"س\", \"ی\", \"ب\", \"ل\", \"ا\", \"ت\", \"ن\", \"م\", \"ک\", \"گ\", \"ظ\", \"ط\", \"ز\", \"ر\", \"ذ\", \"د\", \"پ\", \"و\", \"؟\"],\n        englishChar = [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", \"[\", \"]\", \"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \"?\"];\n\n    for (var i = 0, charsLen = persianChar.length; i < charsLen; i++) {\n      value = value.replace(new RegExp(persianChar[i], \"g\"), englishChar[i]);\n    }\n\n    this._str = value;\n    return this;\n  }\n  /**\n   * Used for get persian words representation of a number\n   *\n   * @api private\n   * @method _digitsToWords\n   * @param {String} value\n   * @return {Object} PersianJs Object\n   */\n\n\n  function _digitsToWords(value) {\n    var delimiter, digit, i, iThree, numbers, parts, result, resultThree, three;\n\n    if (!isFinite(value)) {\n      return '';\n    }\n\n    if (typeof value !== \"string\") {\n      value = value.toString();\n    }\n\n    parts = ['', 'هزار', 'میلیون', 'میلیارد', 'تریلیون', 'کوادریلیون', 'کویینتیلیون', 'سکستیلیون'];\n    numbers = {\n      0: ['', 'صد', 'دویصت', 'سیصد', 'چهارصد', 'پانصد', 'ششصد', 'هفتصد', 'هشتصد', 'نهصد'],\n      1: ['', 'ده', 'بیست', 'سی', 'چهل', 'پنجاه', 'شصت', 'هفتاد', 'هشتاد', 'نود'],\n      2: ['', 'یک', 'دو', 'سه', 'چهار', 'پنج', 'شش', 'هفت', 'هشت', 'نه'],\n      two: ['ده', 'یازده', 'دوازده', 'سیزده', 'چهارده', 'پانزده', 'شانزده', 'هفده', 'هجده', 'نوزده'],\n      zero: 'صفر'\n    };\n    delimiter = ' و ';\n    valueParts = value.split('').reverse().join('').replace(/\\d{3}(?=\\d)/g, \"$&,\").split('').reverse().join('').split(',').map(function (str) {\n      return Array(4 - str.length).join('0') + str;\n    });\n\n    result = function () {\n      var _results;\n\n      _results = [];\n\n      for (iThree in valueParts) {\n        three = valueParts[iThree];\n\n        resultThree = function () {\n          var _i, _len, _results1;\n\n          _results1 = [];\n\n          for (i = _i = 0, _len = three.length; _i < _len; i = ++_i) {\n            digit = three[i];\n\n            if (i === 1 && digit === '1') {\n              _results1.push(numbers.two[three[2]]);\n            } else if ((i !== 2 || three[1] !== '1') && numbers[i][digit] !== '') {\n              _results1.push(numbers[i][digit]);\n            } else {\n              continue;\n            }\n          }\n\n          return _results1;\n        }();\n\n        resultThree = resultThree.join(delimiter);\n\n        _results.push(resultThree + ' ' + parts[valueParts.length - iThree - 1]);\n      }\n\n      return _results;\n    }();\n\n    result = result.filter(function (x) {\n      return x.trim() !== '';\n    });\n    result = result.join(delimiter).trim();\n\n    if (result === '') {\n      result = numbers.zero;\n    }\n\n    this._str = result;\n    return this;\n  }\n  /**\n   * Used for Zero-width non-joiner correction\n   *\n   * @api private\n   * @method _halfSpace\n   * @param {string} value\n   * @return {object} PersianJs object\n   */\n\n\n  function _halfSpace(value) {\n    if (!value) {\n      return;\n    }\n\n    var pattern; // Replace Zero-width non-joiner between persian MI.\n\n    pattern = /((\\s\\u0645\\u06CC)+( )+([\\u0600-\\u06EF]{1,}){1,})/g;\n    value = value.replace(new RegExp(pattern), \"$2\\u200C$4\"); // Replace Zero-width non-joiner between perisan De-Yii.\n\n    pattern = /(([\\u0600-\\u06EF]{1,})+( )+(ای|ایی|اند|ایم|اید|ام){1})/g;\n    value = value.replace(new RegExp(pattern), \"$2\\u200C$4\");\n    this._str = value;\n    return this;\n  }\n\n  var persianJs = function (inputStr) {\n    if (!inputStr || inputStr === \"\") {\n      throw new Error(\"Input is null or empty.\");\n    }\n\n    return new PersianJs(inputStr);\n  };\n  /**\n   * Current PersianJs version\n   *\n   * @property version\n   * @type String\n   */\n\n\n  persianJs.version = VERSION; //Prototype\n\n  persianJs.fn = PersianJs.prototype = {\n    clone: function () {\n      return persianJs(this);\n    },\n    value: function () {\n      return this._str;\n    },\n    toString: function () {\n      return this._str.toString();\n    },\n    set: function (value) {\n      this._str = String(value);\n      return this;\n    },\n    arabicChar: function () {\n      return _arabicChar.call(this, this._str);\n    },\n    persianNumber: function () {\n      return _persianNumber.call(this, this._str);\n    },\n    arabicNumber: function () {\n      return _arabicNumber.call(this, this._str);\n    },\n    englishNumber: function () {\n      return _englishNumber.call(this, this._str);\n    },\n    toEnglishNumber: function () {\n      return _toEnglishNumber.call(this, this._str);\n    },\n    fixURL: function () {\n      return _decodeURL.call(this, this._str);\n    },\n    decodeURL: function () {\n      return _decodeURL.call(this, this._str);\n    },\n    switchKey: function () {\n      return _switchKey.call(this, this._str);\n    },\n    digitsToWords: function () {\n      return _digitsToWords.call(this, this._str);\n    },\n    halfSpace: function () {\n      return _halfSpace.call(this, this._str);\n    }\n  }; //Expose PersianJs\n  //CommonJS module is defined\n\n  if (hasModule) {\n    module.exports = persianJs;\n  } //global ender:false\n\n\n  if (typeof ender === 'undefined') {\n    // here, `this` means `window` in the browser, or `global` on the server\n    // add `persianJs` as a global object via a string identifier,\n    // for Closure Compiler \"advanced\" mode\n    this['persianJs'] = persianJs;\n  } //global define:false\n\n\n  if (typeof define === 'function' && define.amd) {\n    define('persianJs', [], function () {\n      return persianJs;\n    });\n  }\n})();","map":{"version":3,"sources":["C:/Users/HP/Desktop/dashboard redux/dashboard/node_modules/persianjs/persian.js"],"names":["VERSION","hasModule","module","exports","arabicNumbers","persianNumbers","englishNumbers","PersianJs","str","_str","_arabicChar","value","arabicChars","persianChars","i","charsLen","length","replace","RegExp","_persianNumber","numbersLen","_arabicNumber","toString","_englishNumber","_toEnglishNumber","_decodeURL","old","s","p","decodeURI","_switchKey","persianChar","englishChar","_digitsToWords","delimiter","digit","iThree","numbers","parts","result","resultThree","three","isFinite","two","zero","valueParts","split","reverse","join","map","Array","_results","_i","_len","_results1","push","filter","x","trim","_halfSpace","pattern","persianJs","inputStr","Error","version","fn","prototype","clone","set","String","arabicChar","call","persianNumber","arabicNumber","englishNumber","toEnglishNumber","fixURL","decodeURL","switchKey","digitsToWords","halfSpace","ender","define","amd"],"mappings":"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","sourcesContent":["/**\n * PersianJs v0.4.0\n * https://github.com/usablica/persian.js\n * MIT licensed\n *\n * Copyright (C) 2012 usabli.ca and other contributors\n */\n(function () {\n\n    // Default config/variables\n    var VERSION = \"0.4.0\",\n        // Check for nodeJS\n        hasModule = (typeof module !== 'undefined' && module.exports);\n\t\n\t// Declare Number Arrays in different locales\n\tvar arabicNumbers  = [\"١\", \"٢\", \"٣\", \"٤\", \"٥\", \"٦\", \"٧\", \"٨\", \"٩\", \"٠\"],\n\t\tpersianNumbers = [\"۱\", \"۲\", \"۳\", \"۴\", \"۵\", \"۶\", \"۷\", \"۸\", \"۹\", \"۰\"], \n\t\tenglishNumbers = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"];\n       \n    /**\n     * PersianJs main class\n     *\n     * @class PersianJs\n     */\n    function PersianJs(str) {\n        this._str = str;\n    }\n\n    /**\n     * Used for convert Arabic characters to Persian\n     *\n     * @api private\n     * @method _arabicChar\n     * @param {String} value\n     * @return {Object} PersianJs Object\n     */\n    function _arabicChar(value) {\n        if (!value) {\n            return;\n        }\n        var arabicChars = [\"ي\", \"ك\", \"‍\", \"دِ\", \"بِ\", \"زِ\", \"ذِ\", \"ِشِ\", \"ِسِ\", \"ى\"],\n            persianChars = [\"ی\", \"ک\", \"\", \"د\", \"ب\", \"ز\", \"ذ\", \"ش\", \"س\", \"ی\"];\n\n        for (var i = 0, charsLen = arabicChars.length; i < charsLen; i++) {\n            value = value.replace(new RegExp(arabicChars[i], \"g\"), persianChars[i]);\n        }\n        this._str = value;\n        return this;\n    }\n\n    /**\n     * Used for convert Persian numbers to English\n     * \n     * @api private\n     * @method _persianNumber\n     * @param {String} value\n     * @return {Object} PersianJs Object\n     */\n    function _persianNumber(value) {\n        if (!value) {\n            return;\n        }\n    \n        for (var i = 0, numbersLen = englishNumbers.length; i < numbersLen; i++) {\n            value = value.replace(new RegExp(persianNumbers[i], \"g\"), englishNumbers[i]);\n        }\n    \n        this._str = value;\n        return this;\n    }\n\n    /**\n     * Used for convert Arabic numbers to Persian\n     *\n     * @api private\n     * @method _arabicNumber\n     * @param {String} value\n     * @return {Object} PersianJs Object\n     */\n    function _arabicNumber(value) {\n        if (!value) {\n            return;\n        }\n        value=value.toString();\n\n        for (var i = 0, numbersLen = arabicNumbers.length; i < numbersLen; i++) {\n            value = value.replace(new RegExp(arabicNumbers[i], \"g\"), persianNumbers[i]);\n        }\n        this._str = value;\n        return this;\n    }\n\n    /**\n     * Used for convert English numbers to Persian\n     *\n     * @api private\n     * @method _englishNumber\n     * @param {String} value\n     * @return {Object} PersianJs Object\n     */\n    function _englishNumber(value) {\n        if (!value) {\n            return;\n        }\n        value=value.toString();\n        var englishNumbers = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n            persianNumbers = [\"۱\", \"۲\", \"۳\", \"۴\", \"۵\", \"۶\", \"۷\", \"۸\", \"۹\", \"۰\"];\n\n        for (var i = 0, numbersLen = englishNumbers.length; i < numbersLen; i++) {\n            value = value.replace(new RegExp(englishNumbers[i], \"g\"), persianNumbers[i]);\n        }\n        this._str = value;\n        return this;\n    }\n    \n\t/**\n     * Used for convert Persian and Arabic numbers to English string\n     *\n     * @api private\n     * @method _toEnglishNumber\n     * @param {String} value \n     * @return {Object} PersianJs Object\n     */\n    function _toEnglishNumber(value) {\n        if (!value) {\n            return;\n        }\n        for (var i = 0, numbersLen = englishNumbers.length; i < numbersLen; i++) {\n            value = value.replace(new RegExp(persianNumbers[i], \"g\"), englishNumbers[i])\n\t\t\t\t\t\t .replace(new RegExp(arabicNumbers[i], \"g\"), englishNumbers[i]);\n        }\n        this._str = value;\n        return this;\n    }\n\n    /**\n     * Used for decode Persian Charachters in URL\n     * https://fa.wikipedia.org/wiki/مدیاویکی:Gadget-Extra-Editbuttons-Functions.js\n     *\n     * @api private\n     * @method _decodeURL\n     * @param {String} value\n     * @return {Object} PersianJs Object\n     */\n    function _decodeURL(value) {\n        if (!value) {\n            return;\n        }\n        // Replace every %20 with _ to protect them from decodeURI\n        var old = \"\";\n        while (old != value) {\n            old = value;\n            value = value.replace(/(http\\S+?)\\%20/g, '$1\\u200c\\u200c\\u200c_\\u200c\\u200c\\u200c');\n        }\n        // Decode URIs\n        // NOTE: This would convert all %20's to _'s which could break some links\n        // but we will undo that later on\n        value = value.replace(/(http\\S+)/g, function (s, p) {\n            return decodeURI(p);\n        });\n        // Revive all instances of %20 to make sure no links is broken\n        value = value.replace(/\\u200c\\u200c\\u200c_\\u200c\\u200c\\u200c/g, '%20');\n        this._str = value;\n        return this;\n    }\n\n    /**\n     * Used for Change keyboard layout\n     *\n     * @api private\n     * @method _switchKey\n     * @param {String} value\n     * @return {Object} PersianJs Object\n     */\n    function _switchKey(value) {\n        if (!value) {\n            return;\n        }\n        var persianChar = [ \"ض\", \"ص\", \"ث\", \"ق\", \"ف\", \"غ\", \"ع\", \"ه\", \"خ\", \"ح\", \"ج\", \"چ\", \"ش\", \"س\", \"ی\", \"ب\", \"ل\", \"ا\", \"ت\", \"ن\", \"م\", \"ک\", \"گ\", \"ظ\", \"ط\", \"ز\", \"ر\", \"ذ\", \"د\", \"پ\", \"و\",\"؟\" ],\n            englishChar = [ \"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", \"[\", \"]\", \"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\",\"?\" ];\n\n        for (var i = 0, charsLen = persianChar.length; i < charsLen; i++) {\n            value = value.replace(new RegExp(persianChar[i], \"g\"), englishChar[i]);\n        }\n        this._str = value;\n        return this;\n    }\n\n    /**\n     * Used for get persian words representation of a number\n     *\n     * @api private\n     * @method _digitsToWords\n     * @param {String} value\n     * @return {Object} PersianJs Object\n     */\n    function _digitsToWords(value) {\n        var delimiter, digit, i, iThree, numbers, parts, result, resultThree, three;\n\n        if (!isFinite(value)) {\n            return '';\n        }\n\n        if (typeof value !== \"string\") {\n            value = value.toString();\n        }\n\n        parts = ['', 'هزار', 'میلیون', 'میلیارد', 'تریلیون', 'کوادریلیون', 'کویینتیلیون', 'سکستیلیون'];\n        numbers = {\n            0: ['', 'صد', 'دویصت', 'سیصد', 'چهارصد', 'پانصد', 'ششصد', 'هفتصد', 'هشتصد', 'نهصد'],\n            1: ['', 'ده', 'بیست', 'سی', 'چهل', 'پنجاه', 'شصت', 'هفتاد', 'هشتاد', 'نود'],\n            2: ['', 'یک', 'دو', 'سه', 'چهار', 'پنج', 'شش', 'هفت', 'هشت', 'نه'],\n            two: ['ده', 'یازده', 'دوازده', 'سیزده', 'چهارده', 'پانزده', 'شانزده', 'هفده', 'هجده', 'نوزده'],\n            zero: 'صفر'\n        };\n        delimiter = ' و ';\n\n        valueParts = value.split('').reverse().join('').replace(/\\d{3}(?=\\d)/g, \"$&,\").split('').reverse().join('').split(',').map(function(str) {\n            return Array(4 - str.length).join('0') + str;\n        });\n\n        result = (function() {\n            var _results;\n            _results = [];\n            for (iThree in valueParts) {\n                three = valueParts[iThree];\n\n                resultThree = (function() {\n                    var _i, _len, _results1;\n                    _results1 = [];\n\n                    for (i = _i = 0, _len = three.length; _i < _len; i = ++_i) {\n                        digit = three[i];\n                        if (i === 1 && digit === '1') {\n                            _results1.push(numbers.two[three[2]]);\n                        } else if ((i !== 2 || three[1] !== '1') && numbers[i][digit] !== '') {\n                            _results1.push(numbers[i][digit]);\n                        } else {\n                            continue;\n                        }\n                    }\n\n                    return _results1;\n                })();\n\n                resultThree = resultThree.join(delimiter);\n                _results.push(resultThree + ' ' + parts[valueParts.length - iThree - 1]);\n            }\n            return _results;\n        })();\n\n        result = result.filter(function(x) {\n            return x.trim() !== '';\n        });\n\n        result = result.join(delimiter).trim();\n        if (result === '') {\n            result = numbers.zero;\n        }\n\n        this._str = result;\n        return this;\n    }\n\n    /**\n     * Used for Zero-width non-joiner correction\n     *\n     * @api private\n     * @method _halfSpace\n     * @param {string} value\n     * @return {object} PersianJs object\n     */\n    function _halfSpace(value){\n        if(!value){\n            return;\n        }\n\n        var pattern;\n\n        // Replace Zero-width non-joiner between persian MI.\n        pattern = /((\\s\\u0645\\u06CC)+( )+([\\u0600-\\u06EF]{1,}){1,})/g;\n        value = value.replace( new RegExp(pattern), \"$2\\u200C$4\" );\n\n        // Replace Zero-width non-joiner between perisan De-Yii.\n        pattern = /(([\\u0600-\\u06EF]{1,})+( )+(ای|ایی|اند|ایم|اید|ام){1})/g;\n        value = value.replace( new RegExp(pattern), \"$2\\u200C$4\" );\n\n        this._str = value;\n        return this;\n    }\n\n    var persianJs = function(inputStr) {\n        if (!inputStr || inputStr === \"\") {\n            throw new Error(\"Input is null or empty.\");\n        }\n        return new PersianJs(inputStr);\n    };\n\n    /**\n     * Current PersianJs version\n     *\n     * @property version\n     * @type String\n     */\n    persianJs.version = VERSION;\n\n    //Prototype\n    persianJs.fn = PersianJs.prototype = {\n        clone: function () {\n            return persianJs(this);\n        },\n        value: function () {\n            return this._str;\n        },\n        toString: function () {\n            return this._str.toString();\n        },\n        set : function (value) {\n            this._str = String(value);\n            return this;\n        },\n        arabicChar: function() {\n            return _arabicChar.call(this, this._str);\n        },\n        persianNumber: function () {\n            return _persianNumber.call(this, this._str);\n        },\n        arabicNumber: function() {\n            return _arabicNumber.call(this, this._str);\n        },\n        englishNumber: function() {\n            return _englishNumber.call(this, this._str);\n        },\n        toEnglishNumber: function() {\n            return _toEnglishNumber.call(this, this._str);\n        },\n        fixURL: function() {\n            return _decodeURL.call(this, this._str);\n        },\n        decodeURL: function() {\n            return _decodeURL.call(this, this._str);\n        },\n        switchKey: function() {\n            return _switchKey.call(this, this._str);\n        },\n        digitsToWords: function() {\n            return _digitsToWords.call(this, this._str);\n        },\n        halfSpace: function(){\n            return _halfSpace.call(this, this._str);\n        }\n    };\n\n    //Expose PersianJs\n    //CommonJS module is defined\n    if (hasModule) {\n        module.exports = persianJs;\n    }\n    //global ender:false\n    if (typeof ender === 'undefined') {\n        // here, `this` means `window` in the browser, or `global` on the server\n        // add `persianJs` as a global object via a string identifier,\n        // for Closure Compiler \"advanced\" mode\n        this['persianJs'] = persianJs;\n    }\n    //global define:false\n    if (typeof define === 'function' && define.amd) {\n        define('persianJs', [], function () {\n            return persianJs;\n        });\n    }\n})();\n"]},"metadata":{},"sourceType":"script"}