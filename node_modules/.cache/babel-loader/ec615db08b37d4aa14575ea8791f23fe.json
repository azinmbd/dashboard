{"ast":null,"code":"import axios from \"axios\";\nexport const fetchAllBuildings = () => async dispatch => {\n  const response = await axios.get(\"https://api.lora.atrovan.com/api/buildings/all?password=asd123\");\n  dispatch({\n    type: \"FETCH_ALL_BUILDINGS\",\n    payload: response.data.data\n  });\n};\nexport const fetchBuildingAssets = uuid => async dispatch => {\n  const response = await axios.get(`https://api.lora.atrovan.com/api/assets/building/${uuid}?limit=100`);\n  dispatch({\n    type: \"FETCH_BUILDING_ASSETS\",\n    payload: response.data.data\n  });\n};\nexport const fetchAssetDevices = ({\n  assetId,\n  type\n}) => async dispatch => {\n  if (assetId, type !== undefined) {\n    const response = await axios.get(`https://api.lora.atrovan.com/api/devices/asset/${assetId}?limit=100&type=${type}`);\n    dispatch({\n      type: \"FETCH_ASSET_DEVICES\",\n      payload: response.data.data\n    });\n  }\n};\nexport const fetchSingleAsset = ({\n  assetId,\n  type\n}) => async dispatch => {\n  if (assetId, type !== undefined) {\n    const response = await axios.get(`https://api.lora.atrovan.com/api/asset/${assetId}`);\n    dispatch({\n      type: \"FETCH_SINGLE_ASSET\",\n      payload: response.data\n    });\n  }\n};\nexport const setAssetDetail = ({\n  assetId,\n  type,\n  sinaCount,\n  masudCount\n}) => async dispatch => {\n  const response = {\n    data: {\n      assetId,\n      type,\n      sinaCount,\n      masudCount\n    }\n  };\n  dispatch({\n    type: \"SET_ASSET_DETAIL\",\n    payload: response.data\n  });\n}; // gozareshat page actions \n\nexport const fetchBuildingDevices = uuid => async dispatch => {\n  console.log(uuid);\n  const response = await axios.get(`https://api.lora.atrovan.com/api/devices/building/${uuid}?limit=100`);\n  console.log(response);\n  dispatch({\n    type: \"FETCH_BUILDING_DEVICES\",\n    payload: response.data\n  });\n};\nexport const searchBuildingDevices = ({\n  buildingId,\n  searchTex\n}) => async dispatch => {\n  console.log({\n    buildingId,\n    searchTex\n  });\n  const response = await axios.get(`https://api.lora.atrovan.com/api/devices/building/${buildingId}?limit=100&textSearch=${searchTex}`);\n  console.log(response);\n  dispatch({\n    type: \"SEARCH_BUILDING_DEVICES\",\n    payload: response.data\n  });\n}; // old data fetch\n// export const fetchDevicesID = () => async (dispatch) => {\n//   const response = await axios.get(\n//     \"https://api.lora.atrovan.com/api/telemetry/devices/id\"\n//   );\n//   dispatch({\n//     type: \"FETCH_DEVICES_ID\",\n//     payload: response.data,\n//   });\n// };\n// export const fetchDevicesData = (id) => async (dispatch) => {\n//   for (let i = 0; i < id.length; i++) {\n//     const elementID = id[i];\n//     const response = await axios.get(\n//       `https://api.lora.atrovan.com/api/telemetry/device/latest/${elementID}`\n//     );\n//     dispatch({\n//       type: \"FETCH_DEVICES_DATA\",\n//       payload: response.data.options,\n//     });\n//   }\n// };","map":{"version":3,"sources":["C:/Users/HP/Desktop/dashboard redux/dashboard/src/store/actions/index.js"],"names":["axios","fetchAllBuildings","dispatch","response","get","type","payload","data","fetchBuildingAssets","uuid","fetchAssetDevices","assetId","undefined","fetchSingleAsset","setAssetDetail","sinaCount","masudCount","fetchBuildingDevices","console","log","searchBuildingDevices","buildingId","searchTex"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const fetchAllBuildings = () => async (dispatch) => {\r\n  const response = await axios.get(\r\n    \"https://api.lora.atrovan.com/api/buildings/all?password=asd123\"\r\n  );\r\n  dispatch({\r\n    type: \"FETCH_ALL_BUILDINGS\",\r\n    payload: response.data.data,\r\n  });\r\n};\r\n\r\nexport const fetchBuildingAssets = (uuid) => async (dispatch) => {\r\n  const response = await axios.get(\r\n    `https://api.lora.atrovan.com/api/assets/building/${uuid}?limit=100`\r\n  );\r\n\r\n  dispatch({\r\n    type: \"FETCH_BUILDING_ASSETS\",\r\n    payload: response.data.data,\r\n  });\r\n};\r\n\r\nexport const fetchAssetDevices = ({ assetId, type }) => async (dispatch) => {\r\n  if ((assetId, type !== undefined)) {\r\n    const response = await axios.get(\r\n      `https://api.lora.atrovan.com/api/devices/asset/${assetId}?limit=100&type=${type}`\r\n    );\r\n    dispatch({\r\n      type: \"FETCH_ASSET_DEVICES\",\r\n      payload: response.data.data,\r\n    });\r\n  }\r\n};\r\n\r\nexport const fetchSingleAsset = ({ assetId, type }) => async (dispatch) => {\r\n  if ((assetId, type !== undefined)) {\r\n    const response = await axios.get(\r\n      `https://api.lora.atrovan.com/api/asset/${assetId}`\r\n    );\r\n\r\n    dispatch({\r\n      type: \"FETCH_SINGLE_ASSET\",\r\n      payload: response.data,\r\n    });\r\n  }\r\n};\r\n\r\nexport const setAssetDetail = ({\r\n  assetId,\r\n  type,\r\n  sinaCount,\r\n  masudCount,\r\n}) => async (dispatch) => {\r\n  const response = {\r\n    data: {\r\n      assetId,\r\n      type,\r\n      sinaCount,\r\n      masudCount,\r\n    },\r\n  };\r\n  dispatch({\r\n    type: \"SET_ASSET_DETAIL\",\r\n    payload: response.data,\r\n  });\r\n};\r\n\r\n// gozareshat page actions \r\n\r\nexport const fetchBuildingDevices = ( uuid ) => async (dispatch) => {\r\n  console.log(uuid);\r\n    const response = await axios.get(\r\n     `https://api.lora.atrovan.com/api/devices/building/${uuid}?limit=100`\r\n    );\r\n\r\n    console.log(response);\r\n    \r\n    dispatch({\r\n      type: \"FETCH_BUILDING_DEVICES\",\r\n      payload: response.data,\r\n    });\r\n};\r\n\r\nexport const searchBuildingDevices = ( {buildingId, searchTex} ) => async (dispatch) => {\r\n  console.log({buildingId, searchTex});\r\n    const response = await axios.get(\r\n     `https://api.lora.atrovan.com/api/devices/building/${buildingId}?limit=100&textSearch=${searchTex}`\r\n    );\r\n\r\n    console.log(response);\r\n    \r\n    dispatch({\r\n      type: \"SEARCH_BUILDING_DEVICES\",\r\n      payload: response.data,\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n// old data fetch\r\n\r\n// export const fetchDevicesID = () => async (dispatch) => {\r\n//   const response = await axios.get(\r\n//     \"https://api.lora.atrovan.com/api/telemetry/devices/id\"\r\n//   );\r\n//   dispatch({\r\n//     type: \"FETCH_DEVICES_ID\",\r\n//     payload: response.data,\r\n//   });\r\n// };\r\n\r\n// export const fetchDevicesData = (id) => async (dispatch) => {\r\n//   for (let i = 0; i < id.length; i++) {\r\n//     const elementID = id[i];\r\n//     const response = await axios.get(\r\n//       `https://api.lora.atrovan.com/api/telemetry/device/latest/${elementID}`\r\n//     );\r\n//     dispatch({\r\n//       type: \"FETCH_DEVICES_DATA\",\r\n//       payload: response.data.options,\r\n//     });\r\n//   }\r\n// };"]},"metadata":{},"sourceType":"module"}